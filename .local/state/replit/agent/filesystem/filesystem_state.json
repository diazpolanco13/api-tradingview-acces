{"file_contents":{"README.md":{"content":"# 🚀 TradingView API Management v2\n**Advanced RESTful API System for Pine Script Access Management with Secure Admin Panel**\n\n[![Replit](https://img.shields.io/badge/Deploy%20on-Replit-blue?logo=replit)](https://replit.com/@trendoscope/Tradingview-Access-Management)\n[![GitHub](https://img.shields.io/badge/GitHub-Repository-black?logo=github)](https://github.com/diazpolanco13/TradingView-API-Management-v2)\n\n> **⚡ Complete automation solution for TradingView Pine Script access management with secure authentication, real-time validation, and professional admin interface.**\n\n---\n\n## 🌟 **What's New in v2**\n\n### 🎯 **Major Enhancements**\n- ✅ **Secure Web Admin Panel** - Professional interface with token-based authentication\n- ✅ **Real-time Cookie Management** - Automatic validation and manual update system  \n- ✅ **Individual Endpoint Testing** - Six dedicated test buttons for each API function\n- ✅ **Enhanced Security** - Header-based admin token authentication (never in URLs)\n- ✅ **Bug Fixes** - Corrected 30-day access period (now properly uses `1M` format)\n- ✅ **Profile Integration** - Automatic display of username, balance, and profile image\n- ✅ **Live Status Monitoring** - Real-time verification of TradingView session status\n\n### 🔧 **Technical Improvements**\n- **Manual Cookie Extraction**: Bypasses bot detection and reCAPTCHA\n- **Database Session Storage**: Persistent cookie management via Replit database\n- **Token Auto-generation**: Cryptographically secure admin tokens\n- **Enhanced Error Handling**: Comprehensive validation and user feedback\n- **Professional UI/UX**: Bootstrap-based responsive admin interface\n\n---\n\n## 🏗️ **System Architecture**\n\n### **Backend Components**\n- **Flask API Server** (`src/server.py`) - RESTful endpoints with authentication\n- **TradingView Integration** (`src/tradingview.py`) - Session and API management\n- **Helper Functions** (`src/helper.py`) - Date calculations and utilities\n- **Configuration** (`config.py`) - Centralized URL management\n\n### **Frontend Components**  \n- **Admin Panel** (`templates/admin.html`) - Professional web interface\n- **Login System** - Secure token-based authentication\n- **Testing Interface** - Individual endpoint validation tools\n\n### **Security Layer**\n- **Token Authentication**: Auto-generated secure admin tokens\n- **Session Validation**: Real-time cookie status verification\n- **Header-based Auth**: X-Admin-Token headers (never query parameters)\n- **Database Encryption**: Secure session storage\n\n---\n\n## 🚀 **Quick Setup**\n\n### **1. Deploy on Replit**\n```bash\n# Clone the repository\ngit clone https://github.com/diazpolanco13/TradingView-API-Management-v2.git\n\n# Or use Replit import from GitHub\n```\n\n### **2. Environment Configuration**\nSet up these environment variables in Replit Secrets:\n```env\nusername=your_tradingview_username\npassword=your_tradingview_password\n```\n> **⚠️ Requirements**: Premium TradingView subscription needed for API access.\n\n### **3. Run the Application**\n```bash\npython main.py\n```\n\n**🔐 Admin Token**: The system auto-generates a secure token displayed in console:\n```\n🔐 Admin token generado para esta sesión:\n   tvapi-abc123def456...\n   Usa este token para acceder al panel de administración\n```\n\n---\n\n## 🎮 **Admin Panel Usage**\n\n### **Accessing the Panel**\n1. **Navigate to**: `https://your-repl-name.replit.app/`\n2. **Enter Admin Token**: Use the generated token from console\n3. **Dashboard Access**: Full system control and testing\n\n### **Cookie Management**\n- **Automatic Validation**: System checks cookie status on load\n- **Manual Updates**: Easy cookie refresh when sessions expire\n- **Real-time Status**: Live indicator of authentication state\n\n### **Endpoint Testing**\nSix individual test buttons for complete API validation:\n1. **🔍 Validate User** - Check username existence\n2. **👀 Check Access** - Verify current user permissions  \n3. **✅ Grant 30 Days** - Add month-long access\n4. **🔄 Verify Grant** - Confirm access was granted\n5. **❌ Revoke Access** - Remove user permissions\n6. **✔️ Verify Revoke** - Confirm access removal\n\n---\n\n## 📡 **API Endpoints**\n\n### **Public Endpoints**\n\n#### **`GET /validate/{username}`**\nValidates TradingView username existence.\n\n**Response:**\n```json\n{\n    \"valid\": true,\n    \"verified_username\": \"ExactUsername\"\n}\n```\n\n---\n\n### **Protected Endpoints** \n> **🔐 Authentication Required**: All admin endpoints require `X-Admin-Token` header\n\n#### **`GET /access/{username}?indicator_id={pine_id}`**\nCheck user's current access status for specific indicator.\n\n**Headers:**\n```\nX-Admin-Token: tvapi-your-admin-token\n```\n\n**Response:**\n```json\n{\n    \"has_access\": true,\n    \"indicator_id\": \"PUB;abc123...\",\n    \"username\": \"user123\",\n    \"expiration\": \"2025-10-27T19:28:29.087215+00:00\",\n    \"no_expiration\": false,\n    \"status\": \"checked\"\n}\n```\n\n#### **`POST /access/{username}`**\nGrant access to user for specified duration.\n\n**Headers:**\n```\nX-Admin-Token: tvapi-your-admin-token\nContent-Type: application/json\n```\n\n**Payload:**\n```json\n{\n    \"indicator_id\": \"PUB;abc123...\",\n    \"days\": 30\n}\n```\n\n**Duration Formats:**\n- **30 days**: `\"days\": 30` → Automatically converts to `1M` (1 month)\n- **Other periods**: Direct day values\n- **Lifetime**: Use appropriate endpoint\n\n**Response:**\n```json\n{\n    \"success\": true,\n    \"message\": \"Access granted for 30 days\"\n}\n```\n\n#### **`DELETE /access/{username}?indicator_id={pine_id}`**\nRevoke user access from indicator.\n\n**Headers:**\n```\nX-Admin-Token: tvapi-your-admin-token\n```\n\n**Response:**\n```json\n{\n    \"success\": true,\n    \"message\": \"Access revoked successfully\"\n}\n```\n\n---\n\n## 🔒 **Security Features**\n\n### **Authentication System**\n- **Auto-generated Tokens**: Cryptographically secure random tokens\n- **Session-based**: New token per application restart\n- **Header Authentication**: Never exposed in URLs or query parameters\n\n### **Cookie Management**\n- **Manual Extraction**: Bypasses TradingView's bot detection\n- **Database Storage**: Persistent session management\n- **Automatic Validation**: Real-time authentication status\n- **Error Recovery**: Clear instructions for session renewal\n\n### **API Security**\n- **Protected Endpoints**: All admin operations require authentication\n- **Input Validation**: Comprehensive payload verification\n- **Error Handling**: No sensitive information exposure\n\n---\n\n## 🔧 **Technical Details**\n\n### **TradingView Integration**\nThe system uses TradingView's internal API endpoints:\n- **Username validation**: `/pine_perm/username_hint/`\n- **Access management**: `/pine_perm/modify_access/` and `/pine_perm/add_access/`\n- **User verification**: `/u/{username}/` profile pages\n- **Account data**: `/accounts/balance/` for user information\n\n### **Date Period Handling**\n**Critical Fix**: 30-day access periods now properly use `1M` format:\n```python\n# ✅ Correct implementation\nif days == 30:\n    tv.add_access(access, 'M', 1)  # 1 month = ~30 days\nelse:\n    tv.add_access(access, 'd', days)  # Direct day values\n```\n\n### **Database Schema**\nUsing Replit's built-in key-value database:\n```python\n# Cookie storage\ndb['cookies'] = serialized_cookie_data\n\n# Admin token (runtime only)\nadmin_token = generate_secure_token()\n```\n\n---\n\n## 🎯 **Use Cases**\n\n### **For Script Vendors**\n- **Automated Access Management**: Grant/revoke access programmatically\n- **Subscription Handling**: Integrate with payment systems\n- **User Validation**: Verify customers before processing\n- **Bulk Operations**: Manage multiple users efficiently\n\n### **For Developers**\n- **API Integration**: RESTful endpoints for external systems\n- **Webhook Support**: Easy integration with payment processors\n- **Admin Interface**: Non-technical user management\n- **Testing Tools**: Validate functionality before deployment\n\n---\n\n## 🛠️ **Development**\n\n### **Project Structure**\n```\n├── src/\n│   ├── server.py          # Flask API server\n│   ├── tradingview.py     # TradingView integration\n│   └── helper.py          # Utility functions\n├── templates/\n│   └── admin.html         # Admin panel interface\n├── config.py              # Configuration management\n├── main.py                # Application entry point\n└── replit.md              # Project documentation\n```\n\n### **Dependencies**\n- **Flask**: Web framework and API server\n- **requests**: HTTP client for TradingView API\n- **python-dateutil**: Advanced date calculations\n- **Replit Database**: Built-in key-value storage\n\n---\n\n## 🔍 **Troubleshooting**\n\n### **Common Issues**\n\n#### **Cookie Expiration**\n**Symptoms**: API returns authentication errors\n**Solution**: \n1. Open admin panel\n2. Click \"Update Cookies\" button  \n3. Follow manual extraction instructions\n\n#### **Token Authentication**\n**Symptoms**: \"Unauthorized\" responses\n**Solution**: \n1. Check console for current admin token\n2. Include token in `X-Admin-Token` header\n3. Restart application for new token if needed\n\n#### **30-Day Access Issues**\n**Fixed**: System now properly uses `1M` (1 month) format instead of `30D`\n\n---\n\n## 📈 **Monitoring**\n\n### **Built-in Diagnostics**\n- **Cookie Status**: Real-time session validation\n- **API Health**: Endpoint response monitoring\n- **User Balance**: Account information display\n- **Error Logging**: Comprehensive debugging information\n\n### **Admin Dashboard**\n- **Profile Information**: Username, balance, profile image\n- **System Status**: Real-time operational indicators\n- **Test Results**: Individual endpoint validation\n- **Session Management**: Cookie status and refresh options\n\n---\n\n## 🚀 **Publishing**\n\nDeploy your API to production with Replit's built-in deployment:\n1. **Test thoroughly** using the admin panel\n2. **Configure environment** variables properly\n3. **Deploy** via Replit's \"Publish\" button\n4. **Custom domain** available with Replit Pro\n\n---\n\n## 🤝 **Contributing**\n\n### **Development Setup**\n1. Fork the repository\n2. Create feature branch\n3. Test with admin panel\n4. Submit pull request\n\n### **Bug Reports**\nUse the admin panel's testing interface to validate issues before reporting.\n\n---\n\n## 📞 **Support & Links**\n\n### **Referral Programs**\nIf you found this project useful, consider using these referral links:\n- **[TradingView Premium](https://www.tradingview.com/?aff_id=112733)** \n- **[Bybit Trading](https://partner.bybit.com/b/TRENDOSCOPE)**\n- **[BingX Exchange](https://bingx.com/en-us/partner/Trendoscope/)**\n\n### **Original Developer**\n<div align=\"center\">\n<a href=\"https://p.trendoscope.au/\"><img src=\"https://s3.tradingview.com/userpics/7387160-gqgs_big.png\" width=\"100\" height=\"100\"></a>\n<a href=\"https://p.trendoscope.au/twitter\"><img src=\"https://i.pinimg.com/originals/aa/3d/75/aa3d750ddec109594ac7c89cb8cbabab.jpg\" width=\"100\" height=\"100\"></a>\n<a href=\"https://p.trendoscope.au/telegram\"><img src=\"https://i.pinimg.com/originals/70/c3/ea/70c3ea9e43ebd11ec98de96937529408.jpg\" width=\"100\" height=\"100\"></a>\n<a href=\"https://p.trendoscope.au/discord\"><img src=\"https://i.pinimg.com/originals/b6/fe/4a/b6fe4a830e0263d8344b63e3dbcf3033.jpg\" width=\"100\" height=\"100\"></a>\n<a href=\"https://p.trendoscope.au/youtube\"><img src=\"https://i.pinimg.com/originals/f4/14/b8/f414b816ef11df2c1eaae61f2fc8c489.jpg\" width=\"100\" height=\"100\"></a>\n</div>\n\n---\n\n## 📄 **License**\n\nThis project is provided as-is for educational and commercial use. Please ensure compliance with TradingView's Terms of Service when using their APIs.\n\n---\n\n<div align=\"center\">\n\n**🎯 Ready to automate your TradingView Pine Script access management?**\n\n[🚀 **Deploy Now**](https://replit.com/@trendoscope/Tradingview-Access-Management) • [📚 **Documentation**](https://github.com/diazpolanco13/TradingView-API-Management-v2) • [💬 **Support**](https://p.trendoscope.au/discord)\n\n</div>","size_bytes":11853},"main.py":{"content":"import src.server as server\nimport os\n\nif __name__ == '__main__':\n    # Set admin token if not already set\n    if not os.getenv('ADMIN_TOKEN'):\n        # For production, require ADMIN_TOKEN to be set via environment\n        # For development, generate a secure token for this session\n        import secrets\n        admin_token = f\"tvapi-{secrets.token_urlsafe(32)}\"\n        os.environ['ADMIN_TOKEN'] = admin_token\n        print(\"🔐 ADMIN_TOKEN generado y configurado.\")\n        print(\"   ⚠️  Token disponible solo en variables de entorno por seguridad\")\n    else:\n        print(\"✅ Admin panel secured with configured token\")\n    \n    server.start_server()","size_bytes":663},"pyproject.toml":{"content":"[tool.poetry]\nname = \"python-template\"\nversion = \"0.1.0\"\ndescription = \"\"\nauthors = [\"Your Name <you@example.com>\"]\n\n[tool.poetry.dependencies]\npython = \">=3.8.0,<3.9\"\nnumpy = \"^1.22.2\"\nreplit = \"^3.2.4\"\nFlask = \"^2.2.0\"\nurllib3 = \"^1.26.11\"\nrequests = \"^2.28.1\"\npython-dateutil = \"^2.8.2\"\n\n[tool.poetry.dev-dependencies]\ndebugpy = \"^1.6.2\"\npython-lsp-server = {extras = [\"yapf\", \"rope\", \"pyflakes\"], version = \"^1.5.0\"}\ntoml = \"^0.10.2\"\n\n[build-system]\nrequires = [\"poetry-core>=1.0.0\"]\nbuild-backend = \"poetry.core.masonry.api\"","size_bytes":529},"replit.md":{"content":"# Overview\n\nThis project is a RESTful API service for managing TradingView script access management. It's designed for vendors to manage user access to their TradingView publications programmatically. The API provides endpoints for username validation, checking current access levels, and modifying user permissions for TradingView Pine scripts.\n\nThe service requires a Premium TradingView subscription to function properly and is intended to be deployed on Replit with appropriate security measures.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Backend Framework\n- **Flask**: Lightweight web framework providing RESTful API endpoints\n- **Python**: Core language for all backend logic and TradingView integration\n\n## Authentication & Security\n- **Admin Token Authentication**: Secure admin panel access using environment-based token authentication\n- **Session Management**: TradingView session cookie management stored in Replit database\n- **Header-based Security**: Admin operations require X-Admin-Token header (never query parameters)\n\n## Data Storage\n- **Replit Database**: Simple key-value store for persisting TradingView session cookies\n- **Environment Variables**: Configuration storage for credentials and admin tokens\n\n## External Integration\n- **TradingView API**: Custom integration with TradingView's internal endpoints for:\n  - Username validation (`username_hint`)\n  - User access management (`pine_perm` endpoints)\n  - Account balance checking (`tvcoins`)\n  - Session authentication (`accounts/signin`)\n\n## Core Components\n\n### Session Management (`tradingview.py`)\nHandles TradingView authentication by managing session cookies stored in the database. Automatically validates stored cookies and provides fallback error handling when manual cookie updates are required.\n\n### API Endpoints (`server.py`)\n- **Public Endpoint**: `/validate/<username>` - Username validation without authentication\n- **Protected Endpoints**: All access management operations require admin token\n- **Admin Panel**: Web interface for cookie management and system administration\n\n### Configuration (`config.py`)\nCentralized URL configuration for all TradingView API endpoints, making the system maintainable and allowing for easy endpoint updates.\n\n### Helper Functions (`helper.py`)\nDate manipulation utilities for extending user access periods using relativedelta for accurate calendar arithmetic.\n\n## Deployment Architecture\n- **Replit Platform**: Cloud hosting with built-in database and environment management\n- **Auto-scaling**: Replit handles server scaling and availability\n- **Environment Configuration**: Simple setup requiring only TradingView credentials\n\n## Security Considerations\n- Admin token generation with secure random values\n- Session cookie validation and automatic refresh detection\n- Protected admin endpoints with proper authentication headers\n- Error handling that doesn't expose sensitive information\n\n# Recent Updates\n\n## December 27, 2025 - Panel de Administración Implementado\n- **Panel Web Seguro**: Interfaz web completa para gestionar cookies de TradingView con autenticación por token\n- **Información de Perfil**: Sistema obtiene automáticamente imagen de perfil, username, balance y estado de partner\n- **Seguridad Robusta**: Autenticación por token X-Admin-Token con generación automática de tokens seguros\n- **Detección de Expiración**: Verificación automática del estado de cookies con notificaciones en tiempo real\n- **Frontend Completo**: Panel administrativo profesional con login seguro y gestión de cookies\n\n## Funcionalidades del Panel\n- **Login Seguro**: Requiere token de administrador antes del acceso\n- **Estado en Tiempo Real**: Muestra balance, username, imagen de perfil y estado de partner\n- **Gestión de Cookies**: Actualización manual cuando sea necesario con validación automática\n- **API Protegida**: Todos los endpoints administrativos requieren autenticación por header\n\n# External Dependencies\n\n## Core Web Framework\n- **Flask**: Web application framework for API endpoints and admin panel\n- **Werkzeug**: WSGI utilities and HTTP request/response handling\n\n## TradingView Integration\n- **requests**: HTTP client for TradingView API communication\n- **urllib3**: Lower-level HTTP utilities for multipart form encoding\n\n## Date & Time Processing\n- **python-dateutil**: Advanced date parsing and relativedelta calculations for access period extensions\n\n## Hosting Platform\n- **Replit**: Cloud hosting platform providing:\n  - Built-in key-value database\n  - Environment variable management\n  - Automatic HTTPS and domain provisioning\n  - Zero-configuration deployment\n\n## Authentication & Security\n- **secrets**: Cryptographically secure random token generation for admin authentication","size_bytes":4810},"src/config.py":{"content":"urls = dict(\n  tvcoins=\"https://www.tradingview.com/tvcoins/details/\",\n  username_hint=\"https://www.tradingview.com/username_hint/\",\n  list_users=\"https://www.tradingview.com/pine_perm/list_users/\",\n  modify_access=\"https://www.tradingview.com/pine_perm/modify_user_expiration/\",\n  add_access=\"https://www.tradingview.com/pine_perm/add/\",\n  remove_access=\"https://www.tradingview.com/pine_perm/remove/\",\n  signin=\"https://www.tradingview.com/accounts/signin/\")\n","size_bytes":461},"src/helper.py":{"content":"from dateutil import parser\nfrom dateutil.relativedelta import relativedelta\ndef get_access_extension(currentExpirationDate:str, extension_type:str, extension_length:int):\n  expiration = parser.parse(currentExpirationDate)\n  if(extension_type=='Y'):\n    expiration = expiration + relativedelta(years=extension_length)\n  elif(extension_type=='M'):\n    expiration = expiration + relativedelta(months=extension_length)\n  elif(extension_type=='W'):\n    expiration = expiration + relativedelta(weeks=extension_length)\n  elif(extension_type=='D'):\n    expiration = expiration + relativedelta(days=extension_length)\n  return str(expiration)","size_bytes":633},"src/server.py":{"content":"from flask import Flask, request, render_template, jsonify\nfrom .tradingview import tradingview\nfrom .cookie_manager import CookieManager\nimport json\nimport os\nfrom datetime import datetime\nfrom functools import wraps\n#from threading import Thread\napp = Flask('')\n\n# Security: Admin authentication\ndef require_admin_token(f):\n    @wraps(f)\n    def decorated_function(*args, **kwargs):\n        # Only accept token in secure header, never in query params\n        admin_token = request.headers.get('X-Admin-Token')\n        expected_token = os.getenv('ADMIN_TOKEN')\n        \n        # Require ADMIN_TOKEN to be set\n        if not expected_token:\n            return jsonify({'error': 'Server misconfigured - ADMIN_TOKEN not set'}), 500\n        \n        if not admin_token or admin_token != expected_token:\n            return jsonify({'error': 'Unauthorized - Valid X-Admin-Token header required'}), 401\n        \n        return f(*args, **kwargs)\n    return decorated_function\n\n\n@app.route('/validate/<username>', methods=['GET'])\ndef validate(username):\n  try:\n    tv = tradingview()\n    response = tv.validate_username(username)\n    return json.dumps(response), 200, {\n      'Content-Type': 'application/json; charset=utf-8'\n    }\n  except Exception as e:\n    print(\"[X] Exception Occured : \", e)\n    failureResponse = {'errorMessage': 'Unknown Exception Occurred'}\n    return json.dumps(failureResponse), 500, {\n      'Content-Type': 'application/json; charset=utf-8'\n    }\n\n\n@app.route('/access/<username>', methods=['GET', 'POST', 'DELETE'])\n@require_admin_token\ndef access(username):\n  try:\n    # Solo leer JSON en métodos que tienen body\n    if request.method in ['POST', 'DELETE']:\n      jsonPayload = request.json or {}\n    else:\n      jsonPayload = {}\n      \n    # Nuevo formato para compatibilidad con pruebas\n    if 'indicator_id' in jsonPayload or request.method == 'GET':\n      # Formato de pruebas: indicator_id + days\n      indicator_id = jsonPayload.get('indicator_id')\n      days = jsonPayload.get('days')\n      \n      if request.method == 'GET':\n        # Verificar acceso real al indicador si se proporciona indicator_id en query params\n        indicator_id_param = request.args.get('indicator_id')\n        if indicator_id_param:\n          try:\n            tv = tradingview()\n            access = tv.get_access_details(username, indicator_id_param)\n            print(f\"Access details response: {access}\")\n            # Usar el campo correcto 'hasAccess' en lugar de 'results'\n            has_access = access.get('hasAccess', False) if isinstance(access, dict) else False\n            response = {\n              'username': username,\n              'has_access': has_access,\n              'status': 'checked',\n              'indicator_id': indicator_id_param,\n              'expiration': access.get('currentExpiration') if has_access else None,\n              'no_expiration': access.get('noExpiration', False) if has_access else False\n            }\n            return jsonify(response), 200\n          except Exception as e:\n            print(f\"Error checking access: {e}\")\n            response = {\n              'username': username,\n              'has_access': False,\n              'status': 'error',\n              'error': str(e)\n            }\n            return jsonify(response), 200\n        else:\n          # Respuesta simple sin indicador específico\n          response = {\n            'username': username,\n            'has_access': False,\n            'status': 'checked'\n          }\n          return jsonify(response), 200\n      \n      elif request.method == 'POST' and indicator_id and days:\n        # Otorgar acceso\n        try:\n          tv = tradingview()\n          access = tv.get_access_details(username, indicator_id)\n          # Formato correcto según documentación: Para 30 días usar 1M (1 mes)\n          if days == 30:\n            tv.add_access(access, 'M', 1)  # 1 mes = 30 días aproximadamente\n          else:\n            # Para otros valores usar días directamente  \n            tv.add_access(access, 'd', days)\n          return jsonify({'success': True, 'message': f'Access granted for {days} days'}), 200\n        except Exception as e:\n          print(f\"Error granting access: {e}\")\n          return jsonify({'success': False, 'error': str(e)}), 200\n      \n      elif request.method == 'DELETE' and indicator_id:\n        # Revocar acceso\n        try:\n          tv = tradingview()\n          access = tv.get_access_details(username, indicator_id)\n          tv.remove_access(access)\n          return jsonify({'success': True, 'message': 'Access revoked'}), 200\n        except Exception as e:\n          print(f\"Error revoking access: {e}\")\n          return jsonify({'success': False, 'error': str(e)}), 200\n    \n    # Formato original para retrocompatibilidad: pine_ids + duration\n    else:\n      tv = tradingview()\n      pine_ids = jsonPayload.get('pine_ids') or []\n      print(f\"Pine IDs: {pine_ids}\")\n      accessList = []\n      for pine_id in pine_ids:\n        access = tv.get_access_details(username, pine_id)\n        accessList = accessList + [access]\n\n      if request.method == 'POST':\n        duration = jsonPayload.get('duration')\n        if duration:\n          dNumber = int(duration[:-1])\n          dType = duration[-1:]\n          for access in accessList:\n            tv.add_access(access, dType, dNumber)\n\n      if request.method == 'DELETE':\n        for access in accessList:\n          tv.remove_access(access)\n      \n      return json.dumps(accessList), 200, {\n        'Content-Type': 'application/json; charset=utf-8'\n      }\n\n    return jsonify({'error': 'Invalid request format'}), 400\n\n  except Exception as e:\n    print(\"[X] Exception Occured : \", e)\n    failureResponse = {'errorMessage': 'Unknown Exception Occurred'}\n    return json.dumps(failureResponse), 500, {\n      'Content-Type': 'application/json; charset=utf-8'\n    }\n\n\n@app.route('/')\ndef main():\n  return 'Your bot is alive!'\n\n\n@app.route('/admin')\ndef admin_panel():\n  # Public access to serve the HTML - authentication happens via API calls\n  return render_template('admin.html')\n\n\n@app.route('/admin/cookies/status', methods=['GET'])\n@require_admin_token\ndef check_cookies_status():\n  try:\n    # Crear instancia de tradingview para verificar el estado\n    tv = tradingview()\n    \n    # Si llegamos aquí sin errores, las cookies son válidas\n    current_time = datetime.now().isoformat()\n    \n    # Obtener información completa de la cuenta\n    balance = getattr(tv, 'account_balance', '0.00')\n    username = getattr(tv, 'username', '')\n    partner_status = getattr(tv, 'partner_status', 0)\n    aff_id = getattr(tv, 'aff_id', 0)\n    profile_info = getattr(tv, 'profile_info', {})\n    \n    return jsonify({\n      'valid': True,\n      'lastCheck': current_time,\n      'balance': balance,\n      'username': username,\n      'partner_status': partner_status,\n      'aff_id': aff_id,\n      'profile_info': profile_info,\n      'status': 'authenticated'\n    })\n  except Exception as e:\n    current_time = datetime.now().isoformat()\n    return jsonify({\n      'valid': False,\n      'lastCheck': current_time,\n      'error': str(e),\n      'status': 'failed'\n    })\n\n\n@app.route('/admin/cookies/update', methods=['POST'])\n@require_admin_token\ndef update_cookies():\n  try:\n    data = request.json or {}\n    sessionid = data.get('sessionid', '').strip()\n    sessionid_sign = data.get('sessionid_sign', '').strip()\n    \n    if not sessionid or not sessionid_sign:\n      return jsonify({\n        'success': False,\n        'error': 'Both sessionid and sessionid_sign are required'\n      }), 400\n    \n    # Guardar en archivo JSON\n    cookie_manager = CookieManager()\n    if not cookie_manager.save_cookies(sessionid, sessionid_sign):\n      raise Exception(\"Failed to save cookies to JSON file\")\n    \n    # Verificar que las cookies funcionan creando una instancia\n    try:\n      test_tv = tradingview()\n      return jsonify({\n        'success': True,\n        'message': 'Cookies updated and verified successfully',\n        'timestamp': datetime.now().isoformat()\n      })\n    except Exception as test_error:\n      return jsonify({\n        'success': False,\n        'error': f'Cookies saved but failed verification: {str(test_error)}'\n      }), 400\n      \n  except Exception as e:\n    return jsonify({\n      'success': False,\n      'error': f'Failed to update cookies: {str(e)}'\n    }), 500\n\n\n# def run():\n#   app.run(host='0.0.0.0', port=5000)\n\n# def start_server_async():\n#   server = Thread(target=run)\n#   server.start()\n\n\ndef start_server():\n  app.run(host='0.0.0.0', port=5000)\n","size_bytes":8591},"src/tradingview.py":{"content":"import os\nfrom . import config\nimport requests\nimport platform\nfrom urllib3 import encode_multipart_formdata\nfrom datetime import datetime, timezone\nfrom . import helper\nfrom .cookie_manager import CookieManager\n\n\nclass tradingview:\n\n  def get_profile_info(self):\n    \"\"\"Get detailed profile information\"\"\"\n    try:\n      # Try different endpoints for user data\n      headers = {'cookie': self.cookies}\n      endpoints_to_try = [\n        f\"https://www.tradingview.com/pine_perm/get_author_data/?username={self.username}\",\n        f\"https://www.tradingview.com/u/{self.username}/\",\n        \"https://www.tradingview.com/accounts/me/\",\n        \"https://www.tradingview.com/social/user/\",\n      ]\n      \n      for endpoint in endpoints_to_try:\n        try:\n          response = requests.get(endpoint, headers=headers)\n          if response.status_code == 200:\n            # Try to parse as JSON first\n            try:\n              data = response.json()\n              if data and isinstance(data, dict) and len(data) > 0:\n                return data\n            except:\n              # If not JSON, check if HTML contains useful data\n              content = response.text\n              if 'userpic' in content or 'avatar' in content:\n                # Extract image URL from HTML if possible\n                import re\n                img_pattern = r'https://s3\\.tradingview\\.com/userpics/[^\"\\']*'\n                matches = re.findall(img_pattern, content)\n                if matches:\n                  profile_image = matches[0]\n                  return {'profile_image': profile_image, 'username': self.username}\n        except Exception as e:\n          continue\n          \n    except Exception as e:\n      return None\n    \n  def __init__(self):\n    print('Loading cookies from JSON file')\n    \n    # Initialize cookie manager\n    self.cookie_manager = CookieManager()\n    \n    # Try to get cookies from JSON file first\n    self.sessionid, self.sessionid_sign, _ = self.cookie_manager.load_cookies()\n    \n    if self.sessionid and self.sessionid_sign:\n      print('Using cookies from JSON file')\n      self.cookies = f'sessionid={self.sessionid}; sessionid_sign={self.sessionid_sign}'\n      \n      # Test if cookies are valid\n      headers = {'cookie': self.cookies}\n      test = requests.request(\"GET\", config.urls[\"tvcoins\"], headers=headers)\n      print(f'Cookie test response status: {test.status_code}')\n      \n      if test.status_code == 200:\n        print('JSON file cookies are valid')\n        try:\n          account_data = test.json()\n          self.account_balance = account_data.get('partner_fiat_balance', 0)\n          self.username = account_data.get('link', '')\n          self.partner_status = account_data.get('partner_status', 0)\n          self.aff_id = account_data.get('aff_id', 0)\n          print('Account data loaded successfully')\n          \n          # Try to get additional profile info\n          profile_info = self.get_profile_info()\n          if profile_info:\n            self.profile_info = profile_info\n        except:\n          self.account_balance = 0\n        return\n      else:\n        print('JSON file cookies are invalid, need manual update')\n        \n    # If no valid cookies, raise an error that requires manual intervention\n    print('No valid cookies found - please update through admin panel')\n    raise Exception('Invalid or expired TradingView session. Please update cookies through /admin panel.')\n\n  def validate_username(self, username):\n    users = requests.get(config.urls[\"username_hint\"] + \"?s=\" + username)\n    usersList = users.json()\n    validUser = False\n    verifiedUserName = ''\n    for user in usersList:\n      if user['username'].lower() == username.lower():\n        validUser = True\n        verifiedUserName = user['username']\n    return {\"validuser\": validUser, \"verifiedUserName\": verifiedUserName}\n\n  def get_access_details(self, username, pine_id):\n    user_payload = {'pine_id': pine_id, 'username': username}\n\n    user_headers = {\n      'origin': 'https://www.tradingview.com',\n      'Content-Type': 'application/x-www-form-urlencoded',\n      'Cookie': self.cookies\n    }\n    usersResponse = requests.post(config.urls['list_users'] +\n                                  '?limit=10&order_by=-created',\n                                  headers=user_headers,\n                                  data=user_payload)\n    userResponseJson = usersResponse.json()\n    print(f\"Access details request completed with status: {usersResponse.status_code}\")\n    users = userResponseJson['results']\n\n    access_details = user_payload\n    hasAccess = False\n    noExpiration = False\n    expiration = str(datetime.now(timezone.utc))\n    for user in users:\n      if user['username'].lower() == username.lower():\n        hasAccess = True\n        strExpiration = user.get(\"expiration\")\n        if strExpiration is not None:\n          expiration = user['expiration']\n        else:\n          noExpiration = True\n\n    access_details['hasAccess'] = hasAccess\n    access_details['noExpiration'] = noExpiration\n    access_details['currentExpiration'] = expiration\n    return access_details\n\n  def add_access(self, access_details, extension_type, extension_length):\n    noExpiration = access_details['noExpiration']\n    access_details['expiration'] = access_details['currentExpiration']\n    access_details['status'] = 'Not Applied'\n    if not noExpiration:\n      payload = {\n        'pine_id': access_details['pine_id'],\n        'username_recip': access_details['username']\n      }\n      if extension_type != 'L':\n        expiration = helper.get_access_extension(\n          access_details['currentExpiration'], extension_type,\n          extension_length)\n        payload['expiration'] = expiration\n        access_details['expiration'] = expiration\n      else:\n        access_details['noExpiration'] = True\n      enpoint_type = 'modify_access' if access_details[\n        'hasAccess'] else 'add_access'\n\n      body, contentType = encode_multipart_formdata(payload)\n\n      headers = {\n        'origin': 'https://www.tradingview.com',\n        'Content-Type': contentType,\n        'cookie': self.cookies\n      }\n      add_access_response = requests.post(config.urls[enpoint_type],\n                                          data=body,\n                                          headers=headers)\n      access_details['status'] = 'Success' if (\n        add_access_response.status_code == 200\n        or add_access_response.status_code == 201) else 'Failure'\n    return access_details\n\n  def remove_access(self, access_details):\n    payload = {\n      'pine_id': access_details['pine_id'],\n      'username_recip': access_details['username']\n    }\n    body, contentType = encode_multipart_formdata(payload)\n\n    headers = {\n      'origin': 'https://www.tradingview.com',\n      'Content-Type': contentType,\n      'cookie': self.cookies\n    }\n    remove_access_response = requests.post(config.urls['remove_access'],\n                                           data=body,\n                                           headers=headers)\n    access_details['status'] = 'Success' if (remove_access_response.status_code\n                                             == 200) else 'Failure'\n","size_bytes":7194},"src/cookie_manager.py":{"content":"import json\nimport os\nfrom datetime import datetime\n\nclass CookieManager:\n    def __init__(self, file_path=None):\n        # Allow configurable cookie file path via environment variable\n        self.file_path = file_path or os.getenv('COOKIE_FILE', 'data/cookies.json')\n        self.ensure_data_dir()\n    \n    def ensure_data_dir(self):\n        \"\"\"Crear directorio data/ si no existe\"\"\"\n        os.makedirs(os.path.dirname(self.file_path), exist_ok=True)\n    \n    def save_cookies(self, sessionid, sessionid_sign):\n        \"\"\"Guardar cookies en archivo JSON\"\"\"\n        data = {\n            'tv_sessionid': sessionid,\n            'tv_sessionid_sign': sessionid_sign,\n            'cookies_updated_at': datetime.now().isoformat()\n        }\n        \n        try:\n            # Ensure proper file permissions (read/write for owner only)\n            import stat\n            with open(self.file_path, 'w') as f:\n                json.dump(data, f, indent=2)\n            os.chmod(self.file_path, stat.S_IRUSR | stat.S_IWUSR)  # 600 permissions\n            return True\n        except Exception as e:\n            print(f\"Error saving cookies: {e}\")\n            return False\n    \n    def load_cookies(self):\n        \"\"\"Cargar cookies desde archivo JSON\"\"\"\n        if not os.path.exists(self.file_path):\n            return '', '', None\n            \n        try:\n            with open(self.file_path, 'r') as f:\n                data = json.load(f)\n            return (\n                data.get('tv_sessionid', ''),\n                data.get('tv_sessionid_sign', ''),\n                data.get('cookies_updated_at')\n            )\n        except Exception as e:\n            print(f\"Error loading cookies: {e}\")\n            return '', '', None\n    \n    def get_cookie(self, key, default=''):\n        \"\"\"Obtener un valor específico de cookie\"\"\"\n        sessionid, sessionid_sign, updated_at = self.load_cookies()\n        \n        if key == 'tv_sessionid':\n            return sessionid\n        elif key == 'tv_sessionid_sign':\n            return sessionid_sign\n        elif key == 'cookies_updated_at':\n            return updated_at\n        else:\n            return default\n    \n    def cookies_exist(self):\n        \"\"\"Verificar si existen cookies guardadas\"\"\"\n        sessionid, sessionid_sign, _ = self.load_cookies()\n        return bool(sessionid and sessionid_sign)\n    \n    def clear_cookies(self):\n        \"\"\"Limpiar archivo de cookies\"\"\"\n        try:\n            if os.path.exists(self.file_path):\n                os.remove(self.file_path)\n            return True\n        except Exception as e:\n            print(f\"Error clearing cookies: {e}\")\n            return False","size_bytes":2655}},"version":1}